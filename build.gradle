plugins {
    id "com.avast.gradle.docker-compose" version "0.16.3"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id "net.ltgt.errorprone" version "2.0.2" apply false
}

defaultTasks 'check'

ext.junitJupiterVersion = '5.8.2'

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
}

subprojects {

    apply plugin: "net.ltgt.errorprone"
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    checkstyle {
        configFile = rootProject.file('gradle/config/checkstyle/checkstyle.xml')
        toolVersion = '8.5'
    }

    dependencies {
        errorprone("com.google.errorprone:error_prone_core:2.13.1")
    }

    pmd {
        ignoreFailures = true
        pmdTest.enabled = false
        ruleSets = ["category/java/errorprone.xml",
                    "category/java/bestpractices.xml",
                    "category/java/performance.xml",
                    "category/java/multithreading.xml",
                    "category/java/design.xml",
                    "category/java/codestyle.xml"
        ]
    }

    ext.libraries = [
            slf4j  : 'org.slf4j:slf4j-api:1.7.36',
            assertj: 'org.assertj:assertj-core:3.15.0',
            mockito: 'org.mockito:mockito-junit-jupiter:4.5.1',
            guava  : 'com.google.guava:guava:30.1.1-jre',
            logback: 'ch.qos.logback:logback-classic:1.2.11',
            jsr305 : 'com.google.code.findbugs:jsr305:3.0.2'
    ]

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    }

}

subprojects {

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

ext {
    // Credentials for publication repositories (needed only for publishing)
    // Should be set in ${HOME}/.gradle/gradle.properties
    ossrhUser = project.hasProperty('ossrhUser') ? project.property('ossrhUser') : ""
    osshrPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ""
}

configure([project(':ratelimitj-redis'), project(':ratelimitj-inmemory'), project(':ratelimitj-core'), project(':ratelimitj-dropwizard'),project(':ratelimitj-aerospike')]) {

//    apply plugin: 'signing'
//    apply plugin: 'maven'

    apply plugin:  'java-library'
    apply plugin:  'signing'
    apply plugin:  'maven-publish'

    project.group = 'es.moki.ratelimitj'
    project.version = '0.7.0'

    // OSSRH publication
    if (ossrhUser != "") {

        // Signature of artifacts
        signing {
            sign configurations.archives
        }
//        signing {
//            sign publishing.publications.mavenJava
//        }

//        nexusPublishing {
//            repositories {
//                sonatype()
//            }
//        }
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from(components.java)
                    pom {
                        name = 'es.moki.ratelimitj'
                        description = 'The RateLimitJ project aims to provide a modular rate limiting solution'
                        url = 'https://github.com/mokies/ratelimitj'
                        licenses {
                            license {
                                name = 'Apache License Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0'
//                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id = 'mokies'
                                name = 'Craig Baker'
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/mokies/ratelimitj.git'
                            developerConnection = 'scm:git:git@github.com:mokies/ratelimitj.git'
                            url = 'https://github.com/mokies/ratelimitj.git'
                        }
                    }
                }
            }
        }

//        uploadArchives {
//            repositories {
//                mavenDeployer {
//                    // POM signature
//                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//                    // Target repository
//                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                        authentication(userName: ossrhUser, password: osshrPassword)
//                    }
//                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                        authentication(userName: ossrhUser, password: osshrPassword)
//                    }
//
//                    pom.project {
//                        name 'es.moki.ratelimitj'
//                        description 'The RateLimitJ project aims to provide a modular rate limiting solution'
//                        packaging 'jar'
//                        url 'https://github.com/mokies/ratelimitj'
//
//                        scm {
//                            connection 'scm:git:https://github.com/mokies/ratelimitj.git'
//                            developerConnection 'scm:git:git@github.com:mokies/ratelimitj.git'
//                            url 'https://github.com/mokies/ratelimitj.git'
//                        }
//
//                        licenses {
//                            license {
//                                name 'Apache License Version 2.0'
//                                url 'http://www.apache.org/licenses/LICENSE-2.0'
//                                distribution 'repo'
//                            }
//                        }
//
//                        developers {
//                            developer {
//                                id = 'mokies'
//                                name = 'Craig Baker'
//                            }
//                        }
//                    }
//                }
//            }
//        }
    }
//    else {
//        uploadArchives {
//            repositories {
//                mavenLocal()
//            }
//        }
//    }

//    uploadArchives.dependsOn build
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }

    afterEvaluate {
        getClassDirectories().from(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['es/moki/ratelimitj/test', 'es/moki/ratelimitj/inmemory', 'es/moki/ratelimitj/hazelcast'])
        }))
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

// http://nemerosa.ghost.io/2015/07/01/publishing-to-the-maven-central-using-gradle/
// ./gradlew uploadArchives









